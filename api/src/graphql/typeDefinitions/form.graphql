  input KeyValueObject{
    key   : String!
    value : FormValue!
  }

  type DeleteInfo {
    nodesDeleted: Int!
    relationshipsDeleted: Int!
  }


  type FieldKeyValuePair{
    """
    KeyValueObject holds submitted infomation from the forms
    within the frontend.
    The reason it shaped as a key value pair is due to the fact 
    form state is set as a object in which we can just easily populate
    the object by having a key which is just the name of the field and of that
    value of that field
    """
    key   : String!
    value : FormValue!
  }

  type Patient {
    patient_id: String!
    program_id: String!
    study: String
    submissions: [Submission] @relationship(type: "DATA_FOR", direction: IN)
  }

  type Submission {
    submission_id: ID! @id
    form_id: String!
    patient: Patient! @relationship(type: "DATA_FOR", direction: OUT)
    fields: [FieldKeyValuePair!]! @relationship(type: "HAS_VALUE", direction: OUT)
    submittedBy: KeycloakUser! @relationship(type: "SUBMITTED_BY", direction: OUT)
  }

  type FormDraft {
    """
      FormDraft allows the user to save a draft of any form they are currently
      editing so they do not lose the data they have already input
    """
    draft_id: ID! @id
    form_id: String!
    patient_id: String!
    secondary_ids: String # Secondary IDs are fields that are unique to a form, but are not part of the patient's data
    data: String
    createdBy: KeycloakUser @relationship(type: "CREATED_BY", direction: OUT) 
  }

  type FormTemplate {
    """
      FormTemplate allows the user to save a template of any form
      so they can have a starting point for multiple submissions with common data.
      Patient data is not saved in templates to preserve anonymity.
    """
    template_id: ID! @id
    form_id: String!
    patient_id: String!
    secondary_ids: String # Secondary IDs are fields that are unique to a form
    data: String
    createdBy: KeycloakUser @relationship(type: "CREATED_BY", direction: OUT)
  }

  type Form {
    """
    
    """
    form_id: String
    formID: String
    form_name: String
    name: String
    form_relationship_cardinality : FormValue
    next_form: [Form!]!  @relationship(type : "NEXT_FORM", direction : OUT, properties: "Studies")
    display_name: Parser
    label: Parser
    fields: [Field!] @relationship(type: "BELONGS_TO", direction: IN, properties: "IsID")
    has_next_question: [Field] @relationship(type : "HAS_NEXT_QUESTION", direction : OUT)
    studies: [String]
    weight: FormValue
    id_fields: [String]
    required_fields: Parser
    mutex_fields: Parser
    branch_fields: [String]
  }

  type Field {
    """
    Field metadata holds all the informaton needed to populate
    the frontend dynamically
    """
    label: Parser
    description: String
    name: String
    type: String
    regex: String
    value: FormValue
    minValue: FormValue
    maxValue: FormValue
    set: SampleSet
    required: FormValue
    component: String
    conditionals: Parser
    enablingConditions: [String]
    placeholder: String
    filter: Parser
    info: String
    display_name: Parser
    studies: [String]
    options: [String]
    format: FormValue
    api: Parser
    has_next_question: Field @relationship(type : "HAS_NEXT_QUESTION", direction : OUT)
    belongs_to(isID: Boolean): Form! @relationship(type: "BELONGS_TO", direction: OUT)
  }

  interface IsID @relationshipProperties {
    isID: Boolean!
    override: Parser
  }

  interface Studies @relationshipProperties {
    studies: [String]
  }


  type Query {

    GetFormFields(id: String!, study: String) : [Field]
    @cypher( statement: """ 
    MATCH (n:Field)-[:BELONGS_TO]->(f:Form {formID : $id})
    WHERE single(x in n.studies WHERE x = $study)
    RETURN n as fields
    UNION
    MATCH (f:Form {formID: $id})-[:HAS_NEXT_QUESTION*]->(n2:Field)
    WHERE single(x in n2.studies WHERE x = $study)
    RETURN n2 as fields
    """)
    GetRootForm(study: String!): Form @cypher(statement: """
    MATCH (f:Form)
    WHERE NOT ()-[:NEXT_FORM]->(f)
    AND single(x IN f.studies WHERE x = $study)
    RETURN f
    """)
    GetPatientID: [Field!]! @cypher(statement:"""
    MATCH (f:Form)
    WHERE NOT ()-[:NEXT_FORM]->(f)
    WITH f
    MATCH (n:Field)-[r:BELONGS_TO]->(f)
    WHERE r.isID = true
    RETURN n
    """)
    ParentForm(id: String!): Form @cypher(statement: """
    MATCH (f:Form {form_id: $id})
    MATCH (x:Form)-[:NEXT_FORM]->(f)
    RETURN x
    LIMIT 1
    """)
  }

  type Mutation {
    findOrCreatePatient(patient_id: String!, program_id: String!, study: String): Patient,
    updateOrCreateDraft(input: FormDraftCreateInput!): FormDraft,
    deleteSubmissionAndFields(where: SubmissionWhere!): DeleteInfo
  }
